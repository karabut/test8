Можно динамически выделить память под массив
int *arr = new int[ 20 ];
примеры работы. 
char *pch = new char[BUFFER_SIZE];

Pазмещать в памяти один объект (например string), инициализирует str его адресом и вызывает конструктор по умолчанию для вновь созданного объекта типа string
string *str = new string;

В языке С тоже есть функции работы с памятью. Например malloc и calloc
int *ptr = malloc( sizeof(int) ); здесь происходит выделение памяти ровно на 1 объект типа int. 
Функция calloc выделяет n объектов размером m и заполняет их нулями. Обычно она используется для выделения памяти под массивы
void* calloc(size_t num, size_t size);
Такжн есть важная функция  realloc. Она позволяет изменить размер ранее выделенной памяти и получает в качестве аргументов старый указатель и новый размер памяти в байтах:
void* realloc(void* ptr, size_t size)


Высвобождение памяти выполняется с помощью функции free()
После освобождения памяти можно задать для полной уверенности *ptr = 0. Тоесть дополнительно указать на то, что он никуда не указывает больше. 

Память, выделенная динамически с помощью new оператора, может быть освобождена с помощью delete оператора.
Оператор delete вызывает operator delete функцию, которая освобождает память. Использование delete оператора также приводит к вызову деструктора класса 
(если он существует).
